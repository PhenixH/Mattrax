// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addDevicesToGroupStmt, err = db.PrepareContext(ctx, addDevicesToGroup); err != nil {
		return nil, fmt.Errorf("error preparing query AddDevicesToGroup: %w", err)
	}
	if q.addDomainToTenantStmt, err = db.PrepareContext(ctx, addDomainToTenant); err != nil {
		return nil, fmt.Errorf("error preparing query AddDomainToTenant: %w", err)
	}
	if q.addPoliciesToGroupStmt, err = db.PrepareContext(ctx, addPoliciesToGroup); err != nil {
		return nil, fmt.Errorf("error preparing query AddPoliciesToGroup: %w", err)
	}
	if q.createRawCertStmt, err = db.PrepareContext(ctx, createRawCert); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRawCert: %w", err)
	}
	if q.deleteDomainStmt, err = db.PrepareContext(ctx, deleteDomain); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteDomain: %w", err)
	}
	if q.deleteGroupStmt, err = db.PrepareContext(ctx, deleteGroup); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteGroup: %w", err)
	}
	if q.deletePolicyStmt, err = db.PrepareContext(ctx, deletePolicy); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePolicy: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteUserInTenantStmt, err = db.PrepareContext(ctx, deleteUserInTenant); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserInTenant: %w", err)
	}
	if q.getDeviceStmt, err = db.PrepareContext(ctx, getDevice); err != nil {
		return nil, fmt.Errorf("error preparing query GetDevice: %w", err)
	}
	if q.getDeviceGroupsStmt, err = db.PrepareContext(ctx, getDeviceGroups); err != nil {
		return nil, fmt.Errorf("error preparing query GetDeviceGroups: %w", err)
	}
	if q.getDevicePoliciesStmt, err = db.PrepareContext(ctx, getDevicePolicies); err != nil {
		return nil, fmt.Errorf("error preparing query GetDevicePolicies: %w", err)
	}
	if q.getDevicesStmt, err = db.PrepareContext(ctx, getDevices); err != nil {
		return nil, fmt.Errorf("error preparing query GetDevices: %w", err)
	}
	if q.getDevicesInGroupStmt, err = db.PrepareContext(ctx, getDevicesInGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetDevicesInGroup: %w", err)
	}
	if q.getGroupStmt, err = db.PrepareContext(ctx, getGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroup: %w", err)
	}
	if q.getGroupsStmt, err = db.PrepareContext(ctx, getGroups); err != nil {
		return nil, fmt.Errorf("error preparing query GetGroups: %w", err)
	}
	if q.getPoliciesStmt, err = db.PrepareContext(ctx, getPolicies); err != nil {
		return nil, fmt.Errorf("error preparing query GetPolicies: %w", err)
	}
	if q.getPoliciesInGroupStmt, err = db.PrepareContext(ctx, getPoliciesInGroup); err != nil {
		return nil, fmt.Errorf("error preparing query GetPoliciesInGroup: %w", err)
	}
	if q.getPolicyStmt, err = db.PrepareContext(ctx, getPolicy); err != nil {
		return nil, fmt.Errorf("error preparing query GetPolicy: %w", err)
	}
	if q.getRawCertStmt, err = db.PrepareContext(ctx, getRawCert); err != nil {
		return nil, fmt.Errorf("error preparing query GetRawCert: %w", err)
	}
	if q.getTenantStmt, err = db.PrepareContext(ctx, getTenant); err != nil {
		return nil, fmt.Errorf("error preparing query GetTenant: %w", err)
	}
	if q.getTenantDomainStmt, err = db.PrepareContext(ctx, getTenantDomain); err != nil {
		return nil, fmt.Errorf("error preparing query GetTenantDomain: %w", err)
	}
	if q.getTenantDomainsStmt, err = db.PrepareContext(ctx, getTenantDomains); err != nil {
		return nil, fmt.Errorf("error preparing query GetTenantDomains: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserPermissionLevelForTenantStmt, err = db.PrepareContext(ctx, getUserPermissionLevelForTenant); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserPermissionLevelForTenant: %w", err)
	}
	if q.getUserSecureStmt, err = db.PrepareContext(ctx, getUserSecure); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserSecure: %w", err)
	}
	if q.getUserTenantsStmt, err = db.PrepareContext(ctx, getUserTenants); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserTenants: %w", err)
	}
	if q.getUsersInTenantStmt, err = db.PrepareContext(ctx, getUsersInTenant); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersInTenant: %w", err)
	}
	if q.getUsersInTenantByQueryStmt, err = db.PrepareContext(ctx, getUsersInTenantByQuery); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersInTenantByQuery: %w", err)
	}
	if q.newGroupStmt, err = db.PrepareContext(ctx, newGroup); err != nil {
		return nil, fmt.Errorf("error preparing query NewGroup: %w", err)
	}
	if q.newPolicyStmt, err = db.PrepareContext(ctx, newPolicy); err != nil {
		return nil, fmt.Errorf("error preparing query NewPolicy: %w", err)
	}
	if q.newTenantStmt, err = db.PrepareContext(ctx, newTenant); err != nil {
		return nil, fmt.Errorf("error preparing query NewTenant: %w", err)
	}
	if q.newUserStmt, err = db.PrepareContext(ctx, newUser); err != nil {
		return nil, fmt.Errorf("error preparing query NewUser: %w", err)
	}
	if q.newUserFromAzureADStmt, err = db.PrepareContext(ctx, newUserFromAzureAD); err != nil {
		return nil, fmt.Errorf("error preparing query NewUserFromAzureAD: %w", err)
	}
	if q.removeUserFromTenantStmt, err = db.PrepareContext(ctx, removeUserFromTenant); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveUserFromTenant: %w", err)
	}
	if q.scopeUserToTenantStmt, err = db.PrepareContext(ctx, scopeUserToTenant); err != nil {
		return nil, fmt.Errorf("error preparing query ScopeUserToTenant: %w", err)
	}
	if q.updateDomainStmt, err = db.PrepareContext(ctx, updateDomain); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateDomain: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addDevicesToGroupStmt != nil {
		if cerr := q.addDevicesToGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addDevicesToGroupStmt: %w", cerr)
		}
	}
	if q.addDomainToTenantStmt != nil {
		if cerr := q.addDomainToTenantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addDomainToTenantStmt: %w", cerr)
		}
	}
	if q.addPoliciesToGroupStmt != nil {
		if cerr := q.addPoliciesToGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addPoliciesToGroupStmt: %w", cerr)
		}
	}
	if q.createRawCertStmt != nil {
		if cerr := q.createRawCertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRawCertStmt: %w", cerr)
		}
	}
	if q.deleteDomainStmt != nil {
		if cerr := q.deleteDomainStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteDomainStmt: %w", cerr)
		}
	}
	if q.deleteGroupStmt != nil {
		if cerr := q.deleteGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteGroupStmt: %w", cerr)
		}
	}
	if q.deletePolicyStmt != nil {
		if cerr := q.deletePolicyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePolicyStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteUserInTenantStmt != nil {
		if cerr := q.deleteUserInTenantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserInTenantStmt: %w", cerr)
		}
	}
	if q.getDeviceStmt != nil {
		if cerr := q.getDeviceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDeviceStmt: %w", cerr)
		}
	}
	if q.getDeviceGroupsStmt != nil {
		if cerr := q.getDeviceGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDeviceGroupsStmt: %w", cerr)
		}
	}
	if q.getDevicePoliciesStmt != nil {
		if cerr := q.getDevicePoliciesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDevicePoliciesStmt: %w", cerr)
		}
	}
	if q.getDevicesStmt != nil {
		if cerr := q.getDevicesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDevicesStmt: %w", cerr)
		}
	}
	if q.getDevicesInGroupStmt != nil {
		if cerr := q.getDevicesInGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDevicesInGroupStmt: %w", cerr)
		}
	}
	if q.getGroupStmt != nil {
		if cerr := q.getGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupStmt: %w", cerr)
		}
	}
	if q.getGroupsStmt != nil {
		if cerr := q.getGroupsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGroupsStmt: %w", cerr)
		}
	}
	if q.getPoliciesStmt != nil {
		if cerr := q.getPoliciesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPoliciesStmt: %w", cerr)
		}
	}
	if q.getPoliciesInGroupStmt != nil {
		if cerr := q.getPoliciesInGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPoliciesInGroupStmt: %w", cerr)
		}
	}
	if q.getPolicyStmt != nil {
		if cerr := q.getPolicyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPolicyStmt: %w", cerr)
		}
	}
	if q.getRawCertStmt != nil {
		if cerr := q.getRawCertStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRawCertStmt: %w", cerr)
		}
	}
	if q.getTenantStmt != nil {
		if cerr := q.getTenantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTenantStmt: %w", cerr)
		}
	}
	if q.getTenantDomainStmt != nil {
		if cerr := q.getTenantDomainStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTenantDomainStmt: %w", cerr)
		}
	}
	if q.getTenantDomainsStmt != nil {
		if cerr := q.getTenantDomainsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTenantDomainsStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserPermissionLevelForTenantStmt != nil {
		if cerr := q.getUserPermissionLevelForTenantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserPermissionLevelForTenantStmt: %w", cerr)
		}
	}
	if q.getUserSecureStmt != nil {
		if cerr := q.getUserSecureStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserSecureStmt: %w", cerr)
		}
	}
	if q.getUserTenantsStmt != nil {
		if cerr := q.getUserTenantsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserTenantsStmt: %w", cerr)
		}
	}
	if q.getUsersInTenantStmt != nil {
		if cerr := q.getUsersInTenantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersInTenantStmt: %w", cerr)
		}
	}
	if q.getUsersInTenantByQueryStmt != nil {
		if cerr := q.getUsersInTenantByQueryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersInTenantByQueryStmt: %w", cerr)
		}
	}
	if q.newGroupStmt != nil {
		if cerr := q.newGroupStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newGroupStmt: %w", cerr)
		}
	}
	if q.newPolicyStmt != nil {
		if cerr := q.newPolicyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newPolicyStmt: %w", cerr)
		}
	}
	if q.newTenantStmt != nil {
		if cerr := q.newTenantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newTenantStmt: %w", cerr)
		}
	}
	if q.newUserStmt != nil {
		if cerr := q.newUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newUserStmt: %w", cerr)
		}
	}
	if q.newUserFromAzureADStmt != nil {
		if cerr := q.newUserFromAzureADStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newUserFromAzureADStmt: %w", cerr)
		}
	}
	if q.removeUserFromTenantStmt != nil {
		if cerr := q.removeUserFromTenantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeUserFromTenantStmt: %w", cerr)
		}
	}
	if q.scopeUserToTenantStmt != nil {
		if cerr := q.scopeUserToTenantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing scopeUserToTenantStmt: %w", cerr)
		}
	}
	if q.updateDomainStmt != nil {
		if cerr := q.updateDomainStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateDomainStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                  DBTX
	tx                                  *sql.Tx
	addDevicesToGroupStmt               *sql.Stmt
	addDomainToTenantStmt               *sql.Stmt
	addPoliciesToGroupStmt              *sql.Stmt
	createRawCertStmt                   *sql.Stmt
	deleteDomainStmt                    *sql.Stmt
	deleteGroupStmt                     *sql.Stmt
	deletePolicyStmt                    *sql.Stmt
	deleteUserStmt                      *sql.Stmt
	deleteUserInTenantStmt              *sql.Stmt
	getDeviceStmt                       *sql.Stmt
	getDeviceGroupsStmt                 *sql.Stmt
	getDevicePoliciesStmt               *sql.Stmt
	getDevicesStmt                      *sql.Stmt
	getDevicesInGroupStmt               *sql.Stmt
	getGroupStmt                        *sql.Stmt
	getGroupsStmt                       *sql.Stmt
	getPoliciesStmt                     *sql.Stmt
	getPoliciesInGroupStmt              *sql.Stmt
	getPolicyStmt                       *sql.Stmt
	getRawCertStmt                      *sql.Stmt
	getTenantStmt                       *sql.Stmt
	getTenantDomainStmt                 *sql.Stmt
	getTenantDomainsStmt                *sql.Stmt
	getUserStmt                         *sql.Stmt
	getUserPermissionLevelForTenantStmt *sql.Stmt
	getUserSecureStmt                   *sql.Stmt
	getUserTenantsStmt                  *sql.Stmt
	getUsersInTenantStmt                *sql.Stmt
	getUsersInTenantByQueryStmt         *sql.Stmt
	newGroupStmt                        *sql.Stmt
	newPolicyStmt                       *sql.Stmt
	newTenantStmt                       *sql.Stmt
	newUserStmt                         *sql.Stmt
	newUserFromAzureADStmt              *sql.Stmt
	removeUserFromTenantStmt            *sql.Stmt
	scopeUserToTenantStmt               *sql.Stmt
	updateDomainStmt                    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                  tx,
		tx:                                  tx,
		addDevicesToGroupStmt:               q.addDevicesToGroupStmt,
		addDomainToTenantStmt:               q.addDomainToTenantStmt,
		addPoliciesToGroupStmt:              q.addPoliciesToGroupStmt,
		createRawCertStmt:                   q.createRawCertStmt,
		deleteDomainStmt:                    q.deleteDomainStmt,
		deleteGroupStmt:                     q.deleteGroupStmt,
		deletePolicyStmt:                    q.deletePolicyStmt,
		deleteUserStmt:                      q.deleteUserStmt,
		deleteUserInTenantStmt:              q.deleteUserInTenantStmt,
		getDeviceStmt:                       q.getDeviceStmt,
		getDeviceGroupsStmt:                 q.getDeviceGroupsStmt,
		getDevicePoliciesStmt:               q.getDevicePoliciesStmt,
		getDevicesStmt:                      q.getDevicesStmt,
		getDevicesInGroupStmt:               q.getDevicesInGroupStmt,
		getGroupStmt:                        q.getGroupStmt,
		getGroupsStmt:                       q.getGroupsStmt,
		getPoliciesStmt:                     q.getPoliciesStmt,
		getPoliciesInGroupStmt:              q.getPoliciesInGroupStmt,
		getPolicyStmt:                       q.getPolicyStmt,
		getRawCertStmt:                      q.getRawCertStmt,
		getTenantStmt:                       q.getTenantStmt,
		getTenantDomainStmt:                 q.getTenantDomainStmt,
		getTenantDomainsStmt:                q.getTenantDomainsStmt,
		getUserStmt:                         q.getUserStmt,
		getUserPermissionLevelForTenantStmt: q.getUserPermissionLevelForTenantStmt,
		getUserSecureStmt:                   q.getUserSecureStmt,
		getUserTenantsStmt:                  q.getUserTenantsStmt,
		getUsersInTenantStmt:                q.getUsersInTenantStmt,
		getUsersInTenantByQueryStmt:         q.getUsersInTenantByQueryStmt,
		newGroupStmt:                        q.newGroupStmt,
		newPolicyStmt:                       q.newPolicyStmt,
		newTenantStmt:                       q.newTenantStmt,
		newUserStmt:                         q.newUserStmt,
		newUserFromAzureADStmt:              q.newUserFromAzureADStmt,
		removeUserFromTenantStmt:            q.removeUserFromTenantStmt,
		scopeUserToTenantStmt:               q.scopeUserToTenantStmt,
		updateDomainStmt:                    q.updateDomainStmt,
	}
}
