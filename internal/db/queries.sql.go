// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
	"encoding/json"
	"time"

	"github.com/mattrax/Mattrax/pkg/null"
)

const addDevicesToGroup = `-- name: AddDevicesToGroup :exec
INSERT INTO group_devices(group_id, device_id) VALUES ($1, $2)
`

type AddDevicesToGroupParams struct {
	GroupID  string `json:"group_id"`
	DeviceID string `json:"device_id"`
}

func (q *Queries) AddDevicesToGroup(ctx context.Context, arg AddDevicesToGroupParams) error {
	_, err := q.exec(ctx, q.addDevicesToGroupStmt, addDevicesToGroup, arg.GroupID, arg.DeviceID)
	return err
}

const addDomainToTenant = `-- name: AddDomainToTenant :one
INSERT INTO tenant_domains(tenant_id, domain) VALUES ($1, $2) RETURNING linking_code
`

type AddDomainToTenantParams struct {
	TenantID string `json:"tenant_id"`
	Domain   string `json:"domain"`
}

func (q *Queries) AddDomainToTenant(ctx context.Context, arg AddDomainToTenantParams) (string, error) {
	row := q.queryRow(ctx, q.addDomainToTenantStmt, addDomainToTenant, arg.TenantID, arg.Domain)
	var linking_code string
	err := row.Scan(&linking_code)
	return linking_code, err
}

const addPoliciesToGroup = `-- name: AddPoliciesToGroup :exec
INSERT INTO group_policies(group_id, policy_id) VALUES ($1, $2)
`

type AddPoliciesToGroupParams struct {
	GroupID  string `json:"group_id"`
	PolicyID string `json:"policy_id"`
}

func (q *Queries) AddPoliciesToGroup(ctx context.Context, arg AddPoliciesToGroupParams) error {
	_, err := q.exec(ctx, q.addPoliciesToGroupStmt, addPoliciesToGroup, arg.GroupID, arg.PolicyID)
	return err
}

const createObject = `-- name: CreateObject :exec
INSERT INTO objects(tenant_id, filename, data) VALUES ($1, $2, $3) RETURNING id
`

type CreateObjectParams struct {
	TenantID string      `json:"tenant_id"`
	Filename null.String `json:"filename"`
	Data     []byte      `json:"data"`
}

func (q *Queries) CreateObject(ctx context.Context, arg CreateObjectParams) error {
	_, err := q.exec(ctx, q.createObjectStmt, createObject, arg.TenantID, arg.Filename, arg.Data)
	return err
}

const createRawCert = `-- name: CreateRawCert :exec
INSERT INTO certificates(id, cert, key) VALUES ($1, $2, $3)
`

type CreateRawCertParams struct {
	ID   string `json:"id"`
	Cert []byte `json:"cert"`
	Key  []byte `json:"key"`
}

func (q *Queries) CreateRawCert(ctx context.Context, arg CreateRawCertParams) error {
	_, err := q.exec(ctx, q.createRawCertStmt, createRawCert, arg.ID, arg.Cert, arg.Key)
	return err
}

const deleteApplication = `-- name: DeleteApplication :exec
DELETE FROM applications WHERE id = $1 AND tenant_id = $2
`

type DeleteApplicationParams struct {
	ID       string `json:"id"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) DeleteApplication(ctx context.Context, arg DeleteApplicationParams) error {
	_, err := q.exec(ctx, q.deleteApplicationStmt, deleteApplication, arg.ID, arg.TenantID)
	return err
}

const deleteDomain = `-- name: DeleteDomain :exec
DELETE FROM tenant_domains WHERE domain=$1 AND tenant_id=$2
`

type DeleteDomainParams struct {
	Domain   string `json:"domain"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) DeleteDomain(ctx context.Context, arg DeleteDomainParams) error {
	_, err := q.exec(ctx, q.deleteDomainStmt, deleteDomain, arg.Domain, arg.TenantID)
	return err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM groups WHERE id = $1 AND tenant_id = $2
`

type DeleteGroupParams struct {
	ID       string `json:"id"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) DeleteGroup(ctx context.Context, arg DeleteGroupParams) error {
	_, err := q.exec(ctx, q.deleteGroupStmt, deleteGroup, arg.ID, arg.TenantID)
	return err
}

const deletePolicy = `-- name: DeletePolicy :exec
DELETE FROM policies WHERE id = $1 AND tenant_id = $2
`

type DeletePolicyParams struct {
	ID       string `json:"id"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) DeletePolicy(ctx context.Context, arg DeletePolicyParams) error {
	_, err := q.exec(ctx, q.deletePolicyStmt, deletePolicy, arg.ID, arg.TenantID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE upn=$1
`

func (q *Queries) DeleteUser(ctx context.Context, upn string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, upn)
	return err
}

const deleteUserInTenant = `-- name: DeleteUserInTenant :exec
DELETE FROM users WHERE upn=$1 AND tenant_id=$2
`

type DeleteUserInTenantParams struct {
	UPN      string      `json:"upn"`
	TenantID null.String `json:"tenant_id"`
}

func (q *Queries) DeleteUserInTenant(ctx context.Context, arg DeleteUserInTenantParams) error {
	_, err := q.exec(ctx, q.deleteUserInTenantStmt, deleteUserInTenant, arg.UPN, arg.TenantID)
	return err
}

const getApplication = `-- name: GetApplication :one
SELECT name, description, publisher FROM applications WHERE id = $1 AND tenant_id = $2 LIMIT 1
`

type GetApplicationParams struct {
	ID       string `json:"id"`
	TenantID string `json:"tenant_id"`
}

type GetApplicationRow struct {
	Name        null.String `json:"name"`
	Description null.String `json:"description"`
	Publisher   null.String `json:"publisher"`
}

func (q *Queries) GetApplication(ctx context.Context, arg GetApplicationParams) (GetApplicationRow, error) {
	row := q.queryRow(ctx, q.getApplicationStmt, getApplication, arg.ID, arg.TenantID)
	var i GetApplicationRow
	err := row.Scan(&i.Name, &i.Description, &i.Publisher)
	return i, err
}

const getApplicationTargets = `-- name: GetApplicationTargets :many
SELECT msi_file, store_id FROM application_target WHERE app_id = $1 AND tenant_id = $2
`

type GetApplicationTargetsParams struct {
	AppID    string `json:"app_id"`
	TenantID string `json:"tenant_id"`
}

type GetApplicationTargetsRow struct {
	MsiFile null.String `json:"msi_file"`
	StoreID null.String `json:"store_id"`
}

func (q *Queries) GetApplicationTargets(ctx context.Context, arg GetApplicationTargetsParams) ([]GetApplicationTargetsRow, error) {
	rows, err := q.query(ctx, q.getApplicationTargetsStmt, getApplicationTargets, arg.AppID, arg.TenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetApplicationTargetsRow
	for rows.Next() {
		var i GetApplicationTargetsRow
		if err := rows.Scan(&i.MsiFile, &i.StoreID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getApplications = `-- name: GetApplications :many
SELECT id, name, publisher FROM applications WHERE tenant_id = $1 LIMIT $2 OFFSET $3
`

type GetApplicationsParams struct {
	TenantID string `json:"tenant_id"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

type GetApplicationsRow struct {
	ID        string      `json:"id"`
	Name      null.String `json:"name"`
	Publisher null.String `json:"publisher"`
}

func (q *Queries) GetApplications(ctx context.Context, arg GetApplicationsParams) ([]GetApplicationsRow, error) {
	rows, err := q.query(ctx, q.getApplicationsStmt, getApplications, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetApplicationsRow
	for rows.Next() {
		var i GetApplicationsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Publisher); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevice = `-- name: GetDevice :one
SELECT id, protocol, name, description, state, owner, azure_did, enrolled_at, model FROM devices WHERE id = $1 AND tenant_id = $2 LIMIT 1
`

type GetDeviceParams struct {
	ID       string `json:"id"`
	TenantID string `json:"tenant_id"`
}

type GetDeviceRow struct {
	ID          string             `json:"id"`
	Protocol    ManagementProtocol `json:"protocol"`
	Name        string             `json:"name"`
	Description null.String        `json:"description"`
	State       DeviceState        `json:"state"`
	Owner       null.String        `json:"owner"`
	AzureDid    null.String        `json:"azure_did"`
	EnrolledAt  time.Time          `json:"enrolled_at"`
	Model       null.String        `json:"model"`
}

func (q *Queries) GetDevice(ctx context.Context, arg GetDeviceParams) (GetDeviceRow, error) {
	row := q.queryRow(ctx, q.getDeviceStmt, getDevice, arg.ID, arg.TenantID)
	var i GetDeviceRow
	err := row.Scan(
		&i.ID,
		&i.Protocol,
		&i.Name,
		&i.Description,
		&i.State,
		&i.Owner,
		&i.AzureDid,
		&i.EnrolledAt,
		&i.Model,
	)
	return i, err
}

const getDeviceGroups = `-- name: GetDeviceGroups :many
SELECT groups.id, groups.name FROM groups INNER JOIN group_devices ON group_devices.group_id=groups.id WHERE group_devices.device_id = $1
`

type GetDeviceGroupsRow struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetDeviceGroups(ctx context.Context, deviceID string) ([]GetDeviceGroupsRow, error) {
	rows, err := q.query(ctx, q.getDeviceGroupsStmt, getDeviceGroups, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeviceGroupsRow
	for rows.Next() {
		var i GetDeviceGroupsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevicePolicies = `-- name: GetDevicePolicies :many
SELECT id, name, description, policy_id, group_devices.group_id FROM policies INNER JOIN group_policies ON group_policies.policy_id = policies.id INNER JOIN group_devices ON group_devices.group_id=group_policies.group_id WHERE group_devices.device_id = $1
`

type GetDevicePoliciesRow struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Description null.String `json:"description"`
	PolicyID    string      `json:"policy_id"`
	GroupID     string      `json:"group_id"`
}

func (q *Queries) GetDevicePolicies(ctx context.Context, deviceID string) ([]GetDevicePoliciesRow, error) {
	rows, err := q.query(ctx, q.getDevicePoliciesStmt, getDevicePolicies, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDevicePoliciesRow
	for rows.Next() {
		var i GetDevicePoliciesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PolicyID,
			&i.GroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevices = `-- name: GetDevices :many

SELECT id, name, model FROM devices WHERE tenant_id = $1 LIMIT $2 OFFSET $3
`

type GetDevicesParams struct {
	TenantID string `json:"tenant_id"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

type GetDevicesRow struct {
	ID    string      `json:"id"`
	Name  string      `json:"name"`
	Model null.String `json:"model"`
}

//------ Device Actions
func (q *Queries) GetDevices(ctx context.Context, arg GetDevicesParams) ([]GetDevicesRow, error) {
	rows, err := q.query(ctx, q.getDevicesStmt, getDevices, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDevicesRow
	for rows.Next() {
		var i GetDevicesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Model); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevicesInGroup = `-- name: GetDevicesInGroup :many
SELECT device_id FROM group_devices WHERE group_id = $1 LIMIT $2 OFFSET $3
`

type GetDevicesInGroupParams struct {
	GroupID string `json:"group_id"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) GetDevicesInGroup(ctx context.Context, arg GetDevicesInGroupParams) ([]string, error) {
	rows, err := q.query(ctx, q.getDevicesInGroupStmt, getDevicesInGroup, arg.GroupID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var device_id string
		if err := rows.Scan(&device_id); err != nil {
			return nil, err
		}
		items = append(items, device_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroup = `-- name: GetGroup :one
SELECT id, name, description FROM groups WHERE id = $1 AND tenant_id = $2 LIMIT 1
`

type GetGroupParams struct {
	ID       string `json:"id"`
	TenantID string `json:"tenant_id"`
}

type GetGroupRow struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Description null.String `json:"description"`
}

func (q *Queries) GetGroup(ctx context.Context, arg GetGroupParams) (GetGroupRow, error) {
	row := q.queryRow(ctx, q.getGroupStmt, getGroup, arg.ID, arg.TenantID)
	var i GetGroupRow
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getGroups = `-- name: GetGroups :many
SELECT id, name, description FROM groups WHERE tenant_id = $1 LIMIT $2 OFFSET $3
`

type GetGroupsParams struct {
	TenantID string `json:"tenant_id"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

type GetGroupsRow struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Description null.String `json:"description"`
}

func (q *Queries) GetGroups(ctx context.Context, arg GetGroupsParams) ([]GetGroupsRow, error) {
	rows, err := q.query(ctx, q.getGroupsStmt, getGroups, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGroupsRow
	for rows.Next() {
		var i GetGroupsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObject = `-- name: GetObject :one

SELECT filename, data FROM objects WHERE id = $1 AND tenant_id = $2 LIMIT 1
`

type GetObjectParams struct {
	ID       string `json:"id"`
	TenantID string `json:"tenant_id"`
}

type GetObjectRow struct {
	Filename null.String `json:"filename"`
	Data     []byte      `json:"data"`
}

//------ Object Actions
func (q *Queries) GetObject(ctx context.Context, arg GetObjectParams) (GetObjectRow, error) {
	row := q.queryRow(ctx, q.getObjectStmt, getObject, arg.ID, arg.TenantID)
	var i GetObjectRow
	err := row.Scan(&i.Filename, &i.Data)
	return i, err
}

const getPolicies = `-- name: GetPolicies :many
SELECT id, name, type, description FROM policies WHERE tenant_id = $1 LIMIT $2 OFFSET $3
`

type GetPoliciesParams struct {
	TenantID string `json:"tenant_id"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

type GetPoliciesRow struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Type        string      `json:"type"`
	Description null.String `json:"description"`
}

func (q *Queries) GetPolicies(ctx context.Context, arg GetPoliciesParams) ([]GetPoliciesRow, error) {
	rows, err := q.query(ctx, q.getPoliciesStmt, getPolicies, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPoliciesRow
	for rows.Next() {
		var i GetPoliciesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPoliciesInGroup = `-- name: GetPoliciesInGroup :many
SELECT policy_id FROM group_policies WHERE group_id = $1 LIMIT $2 OFFSET $3
`

type GetPoliciesInGroupParams struct {
	GroupID string `json:"group_id"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) GetPoliciesInGroup(ctx context.Context, arg GetPoliciesInGroupParams) ([]string, error) {
	rows, err := q.query(ctx, q.getPoliciesInGroupStmt, getPoliciesInGroup, arg.GroupID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var policy_id string
		if err := rows.Scan(&policy_id); err != nil {
			return nil, err
		}
		items = append(items, policy_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPolicy = `-- name: GetPolicy :one
SELECT name, type, payload, description FROM policies WHERE id = $1 AND tenant_id = $2 LIMIT 1
`

type GetPolicyParams struct {
	ID       string `json:"id"`
	TenantID string `json:"tenant_id"`
}

type GetPolicyRow struct {
	Name        string          `json:"name"`
	Type        string          `json:"type"`
	Payload     json.RawMessage `json:"payload"`
	Description null.String     `json:"description"`
}

func (q *Queries) GetPolicy(ctx context.Context, arg GetPolicyParams) (GetPolicyRow, error) {
	row := q.queryRow(ctx, q.getPolicyStmt, getPolicy, arg.ID, arg.TenantID)
	var i GetPolicyRow
	err := row.Scan(
		&i.Name,
		&i.Type,
		&i.Payload,
		&i.Description,
	)
	return i, err
}

const getRawCert = `-- name: GetRawCert :one

SELECT cert, key FROM certificates WHERE id = $1 LIMIT 1
`

type GetRawCertRow struct {
	Cert []byte `json:"cert"`
	Key  []byte `json:"key"`
}

//------ Certificates
func (q *Queries) GetRawCert(ctx context.Context, id string) (GetRawCertRow, error) {
	row := q.queryRow(ctx, q.getRawCertStmt, getRawCert, id)
	var i GetRawCertRow
	err := row.Scan(&i.Cert, &i.Key)
	return i, err
}

const getTenant = `-- name: GetTenant :one

SELECT display_name, primary_domain, email, phone FROM tenants WHERE id = $1 LIMIT 1
`

type GetTenantRow struct {
	DisplayName   string      `json:"display_name"`
	PrimaryDomain string      `json:"primary_domain"`
	Email         null.String `json:"email"`
	Phone         null.String `json:"phone"`
}

//------ Tenant
func (q *Queries) GetTenant(ctx context.Context, id string) (GetTenantRow, error) {
	row := q.queryRow(ctx, q.getTenantStmt, getTenant, id)
	var i GetTenantRow
	err := row.Scan(
		&i.DisplayName,
		&i.PrimaryDomain,
		&i.Email,
		&i.Phone,
	)
	return i, err
}

const getTenantDomain = `-- name: GetTenantDomain :one
SELECT linking_code, verified FROM tenant_domains WHERE domain=$1 AND tenant_id=$2 LIMIT 1
`

type GetTenantDomainParams struct {
	Domain   string `json:"domain"`
	TenantID string `json:"tenant_id"`
}

type GetTenantDomainRow struct {
	LinkingCode string `json:"linking_code"`
	Verified    bool   `json:"verified"`
}

func (q *Queries) GetTenantDomain(ctx context.Context, arg GetTenantDomainParams) (GetTenantDomainRow, error) {
	row := q.queryRow(ctx, q.getTenantDomainStmt, getTenantDomain, arg.Domain, arg.TenantID)
	var i GetTenantDomainRow
	err := row.Scan(&i.LinkingCode, &i.Verified)
	return i, err
}

const getTenantDomains = `-- name: GetTenantDomains :many
SELECT domain, linking_code, verified FROM tenant_domains WHERE tenant_id = $1
`

type GetTenantDomainsRow struct {
	Domain      string `json:"domain"`
	LinkingCode string `json:"linking_code"`
	Verified    bool   `json:"verified"`
}

func (q *Queries) GetTenantDomains(ctx context.Context, tenantID string) ([]GetTenantDomainsRow, error) {
	rows, err := q.query(ctx, q.getTenantDomainsStmt, getTenantDomains, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTenantDomainsRow
	for rows.Next() {
		var i GetTenantDomainsRow
		if err := rows.Scan(&i.Domain, &i.LinkingCode, &i.Verified); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT upn, fullname, disabled, azuread_oid FROM users WHERE upn = $1 LIMIT 1
`

type GetUserRow struct {
	UPN        string      `json:"upn"`
	Fullname   string      `json:"fullname"`
	Disabled   bool        `json:"disabled"`
	AzureadOid null.String `json:"azuread_oid"`
}

func (q *Queries) GetUser(ctx context.Context, upn string) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, upn)
	var i GetUserRow
	err := row.Scan(
		&i.UPN,
		&i.Fullname,
		&i.Disabled,
		&i.AzureadOid,
	)
	return i, err
}

const getUserCount = `-- name: GetUserCount :one

SELECT COUNT(*) FROM users
`

// DO NOT RUN THIS FILE. It is used along with sqlc to generate type safe Go from SQL
func (q *Queries) GetUserCount(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.getUserCountStmt, getUserCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserPermissionLevelForTenant = `-- name: GetUserPermissionLevelForTenant :one
SELECT permission_level FROM tenant_users WHERE user_upn = $1 AND tenant_id = $2
`

type GetUserPermissionLevelForTenantParams struct {
	UserUpn  string `json:"user_upn"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) GetUserPermissionLevelForTenant(ctx context.Context, arg GetUserPermissionLevelForTenantParams) (UserPermissionLevel, error) {
	row := q.queryRow(ctx, q.getUserPermissionLevelForTenantStmt, getUserPermissionLevelForTenant, arg.UserUpn, arg.TenantID)
	var permission_level UserPermissionLevel
	err := row.Scan(&permission_level)
	return permission_level, err
}

const getUserSecure = `-- name: GetUserSecure :one
SELECT fullname, password, mfa_token, tenant_id FROM users WHERE upn = $1 LIMIT 1
`

type GetUserSecureRow struct {
	Fullname string      `json:"fullname"`
	Password null.String `json:"password"`
	MfaToken null.String `json:"mfa_token"`
	TenantID null.String `json:"tenant_id"`
}

func (q *Queries) GetUserSecure(ctx context.Context, upn string) (GetUserSecureRow, error) {
	row := q.queryRow(ctx, q.getUserSecureStmt, getUserSecure, upn)
	var i GetUserSecureRow
	err := row.Scan(
		&i.Fullname,
		&i.Password,
		&i.MfaToken,
		&i.TenantID,
	)
	return i, err
}

const getUserTenants = `-- name: GetUserTenants :many
SELECT id, display_name, primary_domain, description FROM tenants INNER JOIN tenant_users ON tenants.id = tenant_users.tenant_id WHERE tenant_users.user_upn = $1
`

type GetUserTenantsRow struct {
	ID            string      `json:"id"`
	DisplayName   string      `json:"display_name"`
	PrimaryDomain string      `json:"primary_domain"`
	Description   null.String `json:"description"`
}

func (q *Queries) GetUserTenants(ctx context.Context, userUpn string) ([]GetUserTenantsRow, error) {
	rows, err := q.query(ctx, q.getUserTenantsStmt, getUserTenants, userUpn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTenantsRow
	for rows.Next() {
		var i GetUserTenantsRow
		if err := rows.Scan(
			&i.ID,
			&i.DisplayName,
			&i.PrimaryDomain,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersInTenant = `-- name: GetUsersInTenant :many
SELECT upn, fullname, azuread_oid FROM users WHERE tenant_id = $1 LIMIT $2 OFFSET $3
`

type GetUsersInTenantParams struct {
	TenantID null.String `json:"tenant_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

type GetUsersInTenantRow struct {
	UPN        string      `json:"upn"`
	Fullname   string      `json:"fullname"`
	AzureadOid null.String `json:"azuread_oid"`
}

func (q *Queries) GetUsersInTenant(ctx context.Context, arg GetUsersInTenantParams) ([]GetUsersInTenantRow, error) {
	rows, err := q.query(ctx, q.getUsersInTenantStmt, getUsersInTenant, arg.TenantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersInTenantRow
	for rows.Next() {
		var i GetUsersInTenantRow
		if err := rows.Scan(&i.UPN, &i.Fullname, &i.AzureadOid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersInTenantByQuery = `-- name: GetUsersInTenantByQuery :many

SELECT upn, fullname, azuread_oid FROM users WHERE tenant_id = $1 AND (upn || fullname || azuread_oid) LIKE $4 LIMIT $2 OFFSET $3
`

type GetUsersInTenantByQueryParams struct {
	TenantID null.String `json:"tenant_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
	UPN      string      `json:"upn"`
}

type GetUsersInTenantByQueryRow struct {
	UPN        string      `json:"upn"`
	Fullname   string      `json:"fullname"`
	AzureadOid null.String `json:"azuread_oid"`
}

// Once https://github.com/kyleconroy/sqlc/issues/778 is fixed change query to (including the ByQuery one): SELECT upn, fullname, azuread_oid FROM users INNER JOIN tenant_users ON users.upn = tenant_users.user_upn WHERE tenant_users.tenant_id = $1 UNION ALL SELECT upn, fullname, azuread_oid FROM users WHERE tenant_id = $1;
func (q *Queries) GetUsersInTenantByQuery(ctx context.Context, arg GetUsersInTenantByQueryParams) ([]GetUsersInTenantByQueryRow, error) {
	rows, err := q.query(ctx, q.getUsersInTenantByQueryStmt, getUsersInTenantByQuery,
		arg.TenantID,
		arg.Limit,
		arg.Offset,
		arg.UPN,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersInTenantByQueryRow
	for rows.Next() {
		var i GetUsersInTenantByQueryRow
		if err := rows.Scan(&i.UPN, &i.Fullname, &i.AzureadOid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newApplication = `-- name: NewApplication :one

INSERT INTO applications(name, tenant_id) VALUES ($1, $2) RETURNING id
`

type NewApplicationParams struct {
	Name     null.String `json:"name"`
	TenantID string      `json:"tenant_id"`
}

//------ Application Actions
func (q *Queries) NewApplication(ctx context.Context, arg NewApplicationParams) (string, error) {
	row := q.queryRow(ctx, q.newApplicationStmt, newApplication, arg.Name, arg.TenantID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const newGlobalUser = `-- name: NewGlobalUser :exec
INSERT INTO users(upn, fullname, password) VALUES ($1, $2, $3)
`

type NewGlobalUserParams struct {
	UPN      string      `json:"upn"`
	Fullname string      `json:"fullname"`
	Password null.String `json:"password"`
}

func (q *Queries) NewGlobalUser(ctx context.Context, arg NewGlobalUserParams) error {
	_, err := q.exec(ctx, q.newGlobalUserStmt, newGlobalUser, arg.UPN, arg.Fullname, arg.Password)
	return err
}

const newGroup = `-- name: NewGroup :one

INSERT INTO groups(name, tenant_id) VALUES ($1, $2) RETURNING id
`

type NewGroupParams struct {
	Name     string `json:"name"`
	TenantID string `json:"tenant_id"`
}

//------ Group Actions
func (q *Queries) NewGroup(ctx context.Context, arg NewGroupParams) (string, error) {
	row := q.queryRow(ctx, q.newGroupStmt, newGroup, arg.Name, arg.TenantID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const newPolicy = `-- name: NewPolicy :one

INSERT INTO policies(name, type, tenant_id) VALUES ($1, $2, $3) RETURNING id
`

type NewPolicyParams struct {
	Name     string `json:"name"`
	Type     string `json:"type"`
	TenantID string `json:"tenant_id"`
}

//------ Policy Actions
func (q *Queries) NewPolicy(ctx context.Context, arg NewPolicyParams) (string, error) {
	row := q.queryRow(ctx, q.newPolicyStmt, newPolicy, arg.Name, arg.Type, arg.TenantID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const newTenant = `-- name: NewTenant :one
INSERT INTO tenants(display_name, primary_domain) VALUES ($1, $2) RETURNING id
`

type NewTenantParams struct {
	DisplayName   string `json:"display_name"`
	PrimaryDomain string `json:"primary_domain"`
}

func (q *Queries) NewTenant(ctx context.Context, arg NewTenantParams) (string, error) {
	row := q.queryRow(ctx, q.newTenantStmt, newTenant, arg.DisplayName, arg.PrimaryDomain)
	var id string
	err := row.Scan(&id)
	return id, err
}

const newUser = `-- name: NewUser :exec

INSERT INTO users(upn, fullname, password, tenant_id) VALUES ($1, $2, $3, $4)
`

type NewUserParams struct {
	UPN      string      `json:"upn"`
	Fullname string      `json:"fullname"`
	Password null.String `json:"password"`
	TenantID null.String `json:"tenant_id"`
}

//------ User
func (q *Queries) NewUser(ctx context.Context, arg NewUserParams) error {
	_, err := q.exec(ctx, q.newUserStmt, newUser,
		arg.UPN,
		arg.Fullname,
		arg.Password,
		arg.TenantID,
	)
	return err
}

const newUserFromAzureAD = `-- name: NewUserFromAzureAD :exec
INSERT INTO users(upn, fullname, azuread_oid) VALUES ($1, $2, $3)
`

type NewUserFromAzureADParams struct {
	UPN        string      `json:"upn"`
	Fullname   string      `json:"fullname"`
	AzureadOid null.String `json:"azuread_oid"`
}

func (q *Queries) NewUserFromAzureAD(ctx context.Context, arg NewUserFromAzureADParams) error {
	_, err := q.exec(ctx, q.newUserFromAzureADStmt, newUserFromAzureAD, arg.UPN, arg.Fullname, arg.AzureadOid)
	return err
}

const removeUserFromTenant = `-- name: RemoveUserFromTenant :exec
DELETE FROM tenant_users WHERE user_upn=$1 AND tenant_id=$2
`

type RemoveUserFromTenantParams struct {
	UserUpn  string `json:"user_upn"`
	TenantID string `json:"tenant_id"`
}

func (q *Queries) RemoveUserFromTenant(ctx context.Context, arg RemoveUserFromTenantParams) error {
	_, err := q.exec(ctx, q.removeUserFromTenantStmt, removeUserFromTenant, arg.UserUpn, arg.TenantID)
	return err
}

const scopeUserToTenant = `-- name: ScopeUserToTenant :exec
INSERT INTO tenant_users(user_upn, tenant_id, permission_level) VALUES ($1, $2, $3)
`

type ScopeUserToTenantParams struct {
	UserUpn         string              `json:"user_upn"`
	TenantID        string              `json:"tenant_id"`
	PermissionLevel UserPermissionLevel `json:"permission_level"`
}

func (q *Queries) ScopeUserToTenant(ctx context.Context, arg ScopeUserToTenantParams) error {
	_, err := q.exec(ctx, q.scopeUserToTenantStmt, scopeUserToTenant, arg.UserUpn, arg.TenantID, arg.PermissionLevel)
	return err
}

const updateApplication = `-- name: UpdateApplication :exec
UPDATE applications SET name=COALESCE($3, name), description=COALESCE($4, description), publisher=COALESCE($5, publisher) WHERE id = $1 AND tenant_id=$2
`

type UpdateApplicationParams struct {
	ID          string      `json:"id"`
	TenantID    string      `json:"tenant_id"`
	Name        null.String `json:"name"`
	Description null.String `json:"description"`
	Publisher   null.String `json:"publisher"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) error {
	_, err := q.exec(ctx, q.updateApplicationStmt, updateApplication,
		arg.ID,
		arg.TenantID,
		arg.Name,
		arg.Description,
		arg.Publisher,
	)
	return err
}

const updateDomain = `-- name: UpdateDomain :exec
UPDATE tenant_domains SET verified=$3 WHERE domain=$1 AND tenant_id=$2
`

type UpdateDomainParams struct {
	Domain   string `json:"domain"`
	TenantID string `json:"tenant_id"`
	Verified bool   `json:"verified"`
}

func (q *Queries) UpdateDomain(ctx context.Context, arg UpdateDomainParams) error {
	_, err := q.exec(ctx, q.updateDomainStmt, updateDomain, arg.Domain, arg.TenantID, arg.Verified)
	return err
}

const updateObject = `-- name: UpdateObject :exec
UPDATE objects SET filename=$3, data=$4 WHERE id=$1 AND tenant_id=$2
`

type UpdateObjectParams struct {
	ID       string      `json:"id"`
	TenantID string      `json:"tenant_id"`
	Filename null.String `json:"filename"`
	Data     []byte      `json:"data"`
}

func (q *Queries) UpdateObject(ctx context.Context, arg UpdateObjectParams) error {
	_, err := q.exec(ctx, q.updateObjectStmt, updateObject,
		arg.ID,
		arg.TenantID,
		arg.Filename,
		arg.Data,
	)
	return err
}
