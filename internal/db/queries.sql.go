// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createRawCert = `-- name: CreateRawCert :exec
INSERT INTO certificates(id, cert, key) VALUES ($1, $2, $3)
`

type CreateRawCertParams struct {
	ID   string `json:"id"`
	Cert []byte `json:"cert"`
	Key  []byte `json:"key"`
}

func (q *Queries) CreateRawCert(ctx context.Context, arg CreateRawCertParams) error {
	_, err := q.exec(ctx, q.createRawCertStmt, createRawCert, arg.ID, arg.Cert, arg.Key)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users(upn, fullname, password) VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	Upn      string         `json:"upn"`
	Fullname string         `json:"fullname"`
	Password sql.NullString `json:"password"`
}

// Exposed via API
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser, arg.Upn, arg.Fullname, arg.Password)
	return err
}

const deleteDeviceCacheNode = `-- name: DeleteDeviceCacheNode :exec
DELETE FROM device_cache WHERE device_id = $1 AND payload_id = $2
`

type DeleteDeviceCacheNodeParams struct {
	DeviceID  int32         `json:"device_id"`
	PayloadID sql.NullInt32 `json:"payload_id"`
}

func (q *Queries) DeleteDeviceCacheNode(ctx context.Context, arg DeleteDeviceCacheNodeParams) error {
	_, err := q.exec(ctx, q.deleteDeviceCacheNodeStmt, deleteDeviceCacheNode, arg.DeviceID, arg.PayloadID)
	return err
}

const deviceCheckinStatus = `-- name: DeviceCheckinStatus :exec
UPDATE devices SET lastseen=NOW(), lastseen_status=$2 WHERE id = $1
`

type DeviceCheckinStatusParams struct {
	ID             int32 `json:"id"`
	LastseenStatus int32 `json:"lastseen_status"`
}

func (q *Queries) DeviceCheckinStatus(ctx context.Context, arg DeviceCheckinStatusParams) error {
	_, err := q.exec(ctx, q.deviceCheckinStatusStmt, deviceCheckinStatus, arg.ID, arg.LastseenStatus)
	return err
}

const deviceUserUnenrollment = `-- name: DeviceUserUnenrollment :exec
UPDATE devices SET state='user_unenrolled', enrollment_type='Unenrolled', azure_did='', nodecache_version='', lastseen=to_timestamp(CAST(0 as bigint)/1000), lastseen_status=0, enrolled_at=to_timestamp(CAST(0 as bigint)/1000), enrolled_by=NULL WHERE id = $1
`

func (q *Queries) DeviceUserUnenrollment(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deviceUserUnenrollmentStmt, deviceUserUnenrollment, id)
	return err
}

const getBasicDevice = `-- name: GetBasicDevice :one
SELECT id, name, description, model FROM devices WHERE id = $1 LIMIT 1
`

type GetBasicDeviceRow struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Model       string         `json:"model"`
}

// Exposed via API
func (q *Queries) GetBasicDevice(ctx context.Context, id int32) (GetBasicDeviceRow, error) {
	row := q.queryRow(ctx, q.getBasicDeviceStmt, getBasicDevice, id)
	var i GetBasicDeviceRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Model,
	)
	return i, err
}

const getBasicDeviceScopedGroups = `-- name: GetBasicDeviceScopedGroups :many
SELECT groups.id, groups.name FROM groups INNER JOIN group_devices ON group_devices.group_id=groups.id WHERE group_devices.device_id = $1
`

type GetBasicDeviceScopedGroupsRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

// Exposed via API
func (q *Queries) GetBasicDeviceScopedGroups(ctx context.Context, deviceID int32) ([]GetBasicDeviceScopedGroupsRow, error) {
	rows, err := q.query(ctx, q.getBasicDeviceScopedGroupsStmt, getBasicDeviceScopedGroups, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBasicDeviceScopedGroupsRow
	for rows.Next() {
		var i GetBasicDeviceScopedGroupsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBasicDeviceScopedPolicies = `-- name: GetBasicDeviceScopedPolicies :many
SELECT id, name, description, priority, group_policies.group_id, policy_id, group_devices.group_id, device_id FROM policies INNER JOIN group_policies ON group_policies.policy_id = policies.id INNER JOIN group_devices ON group_devices.group_id=group_policies.group_id WHERE group_devices.device_id = $1
`

type GetBasicDeviceScopedPoliciesRow struct {
	ID          int32         `json:"id"`
	Name        string        `json:"name"`
	Description string        `json:"description"`
	Priority    int16         `json:"priority"`
	GroupID     sql.NullInt32 `json:"group_id"`
	PolicyID    sql.NullInt32 `json:"policy_id"`
	GroupID_2   int32         `json:"group_id_2"`
	DeviceID    int32         `json:"device_id"`
}

// Exposed via API
func (q *Queries) GetBasicDeviceScopedPolicies(ctx context.Context, deviceID int32) ([]GetBasicDeviceScopedPoliciesRow, error) {
	rows, err := q.query(ctx, q.getBasicDeviceScopedPoliciesStmt, getBasicDeviceScopedPolicies, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBasicDeviceScopedPoliciesRow
	for rows.Next() {
		var i GetBasicDeviceScopedPoliciesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Priority,
			&i.GroupID,
			&i.PolicyID,
			&i.GroupID_2,
			&i.DeviceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevice = `-- name: GetDevice :one
SELECT id, udid, state, enrollment_type, name, description, model, hw_dev_id, operating_system, azure_did, nodecache_version, lastseen, lastseen_status, enrolled_at, enrolled_by FROM devices WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDevice(ctx context.Context, id int32) (Device, error) {
	row := q.queryRow(ctx, q.getDeviceStmt, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Udid,
		&i.State,
		&i.EnrollmentType,
		&i.Name,
		&i.Description,
		&i.Model,
		&i.HwDevID,
		&i.OperatingSystem,
		&i.AzureDid,
		&i.NodecacheVersion,
		&i.Lastseen,
		&i.LastseenStatus,
		&i.EnrolledAt,
		&i.EnrolledBy,
	)
	return i, err
}

const getDeviceByUDID = `-- name: GetDeviceByUDID :one
SELECT id, udid, state, enrollment_type, name, description, model, hw_dev_id, operating_system, azure_did, nodecache_version, lastseen, lastseen_status, enrolled_at, enrolled_by FROM devices WHERE udid = $1 LIMIT 1
`

func (q *Queries) GetDeviceByUDID(ctx context.Context, udid string) (Device, error) {
	row := q.queryRow(ctx, q.getDeviceByUDIDStmt, getDeviceByUDID, udid)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Udid,
		&i.State,
		&i.EnrollmentType,
		&i.Name,
		&i.Description,
		&i.Model,
		&i.HwDevID,
		&i.OperatingSystem,
		&i.AzureDid,
		&i.NodecacheVersion,
		&i.Lastseen,
		&i.LastseenStatus,
		&i.EnrolledAt,
		&i.EnrolledBy,
	)
	return i, err
}

const getDevices = `-- name: GetDevices :many
SELECT id, name, model FROM devices LIMIT 100
`

type GetDevicesRow struct {
	ID    int32  `json:"id"`
	Name  string `json:"name"`
	Model string `json:"model"`
}

// Exposed via API
func (q *Queries) GetDevices(ctx context.Context) ([]GetDevicesRow, error) {
	rows, err := q.query(ctx, q.getDevicesStmt, getDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDevicesRow
	for rows.Next() {
		var i GetDevicesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Model); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevicesDetachedPayloads = `-- name: GetDevicesDetachedPayloads :many
SELECT id, uri, exec FROM device_cache INNER JOIN policies_payload ON policies_payload.id=device_cache.payload_id WHERE device_cache.device_id = $1 AND NOT EXISTS (SELECT policies_payload.id, policies_payload.policy_id, policies_payload.uri, policies_payload.format, policies_payload.type, policies_payload.value, policies_payload.exec FROM group_devices INNER JOIN group_policies ON group_policies.group_id=group_devices.group_id INNER JOIN policies_payload ON policies_payload.policy_id=group_policies.policy_id WHERE group_devices.device_id = device_cache.device_id)
`

type GetDevicesDetachedPayloadsRow struct {
	ID   int32  `json:"id"`
	Uri  string `json:"uri"`
	Exec bool   `json:"exec"`
}

func (q *Queries) GetDevicesDetachedPayloads(ctx context.Context, deviceID int32) ([]GetDevicesDetachedPayloadsRow, error) {
	rows, err := q.query(ctx, q.getDevicesDetachedPayloadsStmt, getDevicesDetachedPayloads, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDevicesDetachedPayloadsRow
	for rows.Next() {
		var i GetDevicesDetachedPayloadsRow
		if err := rows.Scan(&i.ID, &i.Uri, &i.Exec); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevicesPayloads = `-- name: GetDevicesPayloads :many

SELECT policies_payload.id, policies_payload.policy_id, policies_payload.uri, policies_payload.format, policies_payload.type, policies_payload.value, policies_payload.exec FROM group_devices INNER JOIN group_policies ON group_policies.group_id=group_devices.group_id INNER JOIN policies_payload ON policies_payload.policy_id=group_policies.policy_id WHERE group_devices.device_id = $1
`

// TODO: Merge this with last checkin status
func (q *Queries) GetDevicesPayloads(ctx context.Context, deviceID int32) ([]PoliciesPayload, error) {
	rows, err := q.query(ctx, q.getDevicesPayloadsStmt, getDevicesPayloads, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PoliciesPayload
	for rows.Next() {
		var i PoliciesPayload
		if err := rows.Scan(
			&i.ID,
			&i.PolicyID,
			&i.Uri,
			&i.Format,
			&i.Type,
			&i.Value,
			&i.Exec,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevicesPayloadsAwaitingDeployment = `-- name: GetDevicesPayloadsAwaitingDeployment :many
SELECT id, uri, format, type, value, exec FROM group_devices INNER JOIN group_policies ON group_policies.group_id=group_devices.group_id INNER JOIN policies_payload ON policies_payload.policy_id=group_policies.policy_id WHERE group_devices.device_id = $1 AND NOT EXISTS (SELECT 1 FROM device_cache WHERE device_cache.payload_id = policies_payload.id AND device_cache.device_id=group_devices.device_id)
`

type GetDevicesPayloadsAwaitingDeploymentRow struct {
	ID     int32  `json:"id"`
	Uri    string `json:"uri"`
	Format string `json:"format"`
	Type   string `json:"type"`
	Value  string `json:"value"`
	Exec   bool   `json:"exec"`
}

func (q *Queries) GetDevicesPayloadsAwaitingDeployment(ctx context.Context, deviceID int32) ([]GetDevicesPayloadsAwaitingDeploymentRow, error) {
	rows, err := q.query(ctx, q.getDevicesPayloadsAwaitingDeploymentStmt, getDevicesPayloadsAwaitingDeployment, deviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDevicesPayloadsAwaitingDeploymentRow
	for rows.Next() {
		var i GetDevicesPayloadsAwaitingDeploymentRow
		if err := rows.Scan(
			&i.ID,
			&i.Uri,
			&i.Format,
			&i.Type,
			&i.Value,
			&i.Exec,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGroup = `-- name: GetGroup :one
SELECT id, name, description, priority FROM groups WHERE id = $1 LIMIT 1
`

// Exposed via API
func (q *Queries) GetGroup(ctx context.Context, id int32) (Group, error) {
	row := q.queryRow(ctx, q.getGroupStmt, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Priority,
	)
	return i, err
}

const getGroups = `-- name: GetGroups :many
SELECT id, name, description, priority FROM groups LIMIT 100
`

// Exposed via API
func (q *Queries) GetGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.query(ctx, q.getGroupsStmt, getGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPolicies = `-- name: GetPolicies :many

SELECT id, name FROM policies LIMIT 100
`

type GetPoliciesRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

// TODO: Update or Replace
// Exposed via API
func (q *Queries) GetPolicies(ctx context.Context) ([]GetPoliciesRow, error) {
	rows, err := q.query(ctx, q.getPoliciesStmt, getPolicies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPoliciesRow
	for rows.Next() {
		var i GetPoliciesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPoliciesPayloads = `-- name: GetPoliciesPayloads :many
SELECT id, policy_id, uri, format, type, value, exec FROM policies_payload WHERE policy_id = $1
`

func (q *Queries) GetPoliciesPayloads(ctx context.Context, policyID sql.NullInt32) ([]PoliciesPayload, error) {
	rows, err := q.query(ctx, q.getPoliciesPayloadsStmt, getPoliciesPayloads, policyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PoliciesPayload
	for rows.Next() {
		var i PoliciesPayload
		if err := rows.Scan(
			&i.ID,
			&i.PolicyID,
			&i.Uri,
			&i.Format,
			&i.Type,
			&i.Value,
			&i.Exec,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPolicy = `-- name: GetPolicy :one
SELECT id, name, description, priority FROM policies WHERE id = $1 LIMIT 1
`

// Exposed via API
func (q *Queries) GetPolicy(ctx context.Context, id int32) (Policy, error) {
	row := q.queryRow(ctx, q.getPolicyStmt, getPolicy, id)
	var i Policy
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Priority,
	)
	return i, err
}

const getRawCert = `-- name: GetRawCert :one
SELECT cert, key FROM certificates WHERE id = $1 LIMIT 1
`

type GetRawCertRow struct {
	Cert []byte `json:"cert"`
	Key  []byte `json:"key"`
}

func (q *Queries) GetRawCert(ctx context.Context, id string) (GetRawCertRow, error) {
	row := q.queryRow(ctx, q.getRawCertStmt, getRawCert, id)
	var i GetRawCertRow
	err := row.Scan(&i.Cert, &i.Key)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT upn, fullname, azuread_oid, permission_level FROM users WHERE upn = $1 LIMIT 1
`

type GetUserRow struct {
	Upn             string              `json:"upn"`
	Fullname        string              `json:"fullname"`
	AzureadOid      sql.NullString      `json:"azuread_oid"`
	PermissionLevel UserPermissionLevel `json:"permission_level"`
}

// Exposed via API
func (q *Queries) GetUser(ctx context.Context, upn string) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, upn)
	var i GetUserRow
	err := row.Scan(
		&i.Upn,
		&i.Fullname,
		&i.AzureadOid,
		&i.PermissionLevel,
	)
	return i, err
}

const getUserForLogin = `-- name: GetUserForLogin :one
SELECT fullname, password, mfa_token FROM users WHERE upn = $1 LIMIT 1
`

type GetUserForLoginRow struct {
	Fullname string         `json:"fullname"`
	Password sql.NullString `json:"password"`
	MfaToken sql.NullString `json:"mfa_token"`
}

func (q *Queries) GetUserForLogin(ctx context.Context, upn string) (GetUserForLoginRow, error) {
	row := q.queryRow(ctx, q.getUserForLoginStmt, getUserForLogin, upn)
	var i GetUserForLoginRow
	err := row.Scan(&i.Fullname, &i.Password, &i.MfaToken)
	return i, err
}

const getUsers = `-- name: GetUsers :many

SELECT upn, fullname, permission_level FROM users LIMIT 100
`

type GetUsersRow struct {
	Upn             string              `json:"upn"`
	Fullname        string              `json:"fullname"`
	PermissionLevel UserPermissionLevel `json:"permission_level"`
}

// DO NOT RUN THIS FILE. It is used along with sqlc to generate type safe Go from SQL
// Exposed via API
func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.Upn, &i.Fullname, &i.PermissionLevel); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newAzureADUser = `-- name: NewAzureADUser :one
INSERT INTO users(upn, fullname, azuread_oid) VALUES($1, $2, $3) RETURNING upn, fullname, azuread_oid, permission_level
`

type NewAzureADUserParams struct {
	Upn        string         `json:"upn"`
	Fullname   string         `json:"fullname"`
	AzureadOid sql.NullString `json:"azuread_oid"`
}

type NewAzureADUserRow struct {
	Upn             string              `json:"upn"`
	Fullname        string              `json:"fullname"`
	AzureadOid      sql.NullString      `json:"azuread_oid"`
	PermissionLevel UserPermissionLevel `json:"permission_level"`
}

func (q *Queries) NewAzureADUser(ctx context.Context, arg NewAzureADUserParams) (NewAzureADUserRow, error) {
	row := q.queryRow(ctx, q.newAzureADUserStmt, newAzureADUser, arg.Upn, arg.Fullname, arg.AzureadOid)
	var i NewAzureADUserRow
	err := row.Scan(
		&i.Upn,
		&i.Fullname,
		&i.AzureadOid,
		&i.PermissionLevel,
	)
	return i, err
}

const newDevice = `-- name: NewDevice :one


INSERT INTO devices(udid, state, enrollment_type, name, hw_dev_id, operating_system, azure_did, enrolled_by) VALUES($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id
`

type NewDeviceParams struct {
	Udid            string         `json:"udid"`
	State           DeviceState    `json:"state"`
	EnrollmentType  EnrollmentType `json:"enrollment_type"`
	Name            string         `json:"name"`
	HwDevID         string         `json:"hw_dev_id"`
	OperatingSystem string         `json:"operating_system"`
	AzureDid        sql.NullString `json:"azure_did"`
	EnrolledBy      sql.NullString `json:"enrolled_by"`
}

// TODO: Insert or Update
// TODO: Merge all NewDevice functions to single query
func (q *Queries) NewDevice(ctx context.Context, arg NewDeviceParams) (int32, error) {
	row := q.queryRow(ctx, q.newDeviceStmt, newDevice,
		arg.Udid,
		arg.State,
		arg.EnrollmentType,
		arg.Name,
		arg.HwDevID,
		arg.OperatingSystem,
		arg.AzureDid,
		arg.EnrolledBy,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const newDeviceCacheNode = `-- name: NewDeviceCacheNode :one
INSERT INTO device_cache(device_id, payload_id) VALUES ($1, $2) RETURNING cache_id
`

type NewDeviceCacheNodeParams struct {
	DeviceID  int32         `json:"device_id"`
	PayloadID sql.NullInt32 `json:"payload_id"`
}

func (q *Queries) NewDeviceCacheNode(ctx context.Context, arg NewDeviceCacheNodeParams) (int32, error) {
	row := q.queryRow(ctx, q.newDeviceCacheNodeStmt, newDeviceCacheNode, arg.DeviceID, arg.PayloadID)
	var cache_id int32
	err := row.Scan(&cache_id)
	return cache_id, err
}

const newDeviceReplacingExisting = `-- name: NewDeviceReplacingExisting :exec
UPDATE devices SET state=$2, enrollment_type=$3, name=$4, hw_dev_id=$5, operating_system=$6, azure_did=$7, nodecache_version='', lastseen=NOW(), lastseen_status=0, enrolled_at=NOW(), enrolled_by=$8 WHERE udid = $1
`

type NewDeviceReplacingExistingParams struct {
	Udid            string         `json:"udid"`
	State           DeviceState    `json:"state"`
	EnrollmentType  EnrollmentType `json:"enrollment_type"`
	Name            string         `json:"name"`
	HwDevID         string         `json:"hw_dev_id"`
	OperatingSystem string         `json:"operating_system"`
	AzureDid        sql.NullString `json:"azure_did"`
	EnrolledBy      sql.NullString `json:"enrolled_by"`
}

func (q *Queries) NewDeviceReplacingExisting(ctx context.Context, arg NewDeviceReplacingExistingParams) error {
	_, err := q.exec(ctx, q.newDeviceReplacingExistingStmt, newDeviceReplacingExisting,
		arg.Udid,
		arg.State,
		arg.EnrollmentType,
		arg.Name,
		arg.HwDevID,
		arg.OperatingSystem,
		arg.AzureDid,
		arg.EnrolledBy,
	)
	return err
}

const newDeviceReplacingExistingResetCache = `-- name: NewDeviceReplacingExistingResetCache :exec
DELETE FROM device_cache WHERE device_id=$1
`

func (q *Queries) NewDeviceReplacingExistingResetCache(ctx context.Context, deviceID int32) error {
	_, err := q.exec(ctx, q.newDeviceReplacingExistingResetCacheStmt, newDeviceReplacingExistingResetCache, deviceID)
	return err
}

const newDeviceReplacingExistingResetInventory = `-- name: NewDeviceReplacingExistingResetInventory :exec
DELETE FROM device_cache WHERE device_id=$1
`

func (q *Queries) NewDeviceReplacingExistingResetInventory(ctx context.Context, deviceID int32) error {
	_, err := q.exec(ctx, q.newDeviceReplacingExistingResetInventoryStmt, newDeviceReplacingExistingResetInventory, deviceID)
	return err
}

const setDeviceState = `-- name: SetDeviceState :exec
UPDATE devices SET state=$2 WHERE id = $1
`

type SetDeviceStateParams struct {
	ID    int32       `json:"id"`
	State DeviceState `json:"state"`
}

func (q *Queries) SetDeviceState(ctx context.Context, arg SetDeviceStateParams) error {
	_, err := q.exec(ctx, q.setDeviceStateStmt, setDeviceState, arg.ID, arg.State)
	return err
}

const settings = `-- name: Settings :one
SELECT tenant_name, tenant_email, tenant_website, tenant_phone, tenant_azureid, disable_enrollment FROM settings LIMIT 1
`

func (q *Queries) Settings(ctx context.Context) (Setting, error) {
	row := q.queryRow(ctx, q.settingsStmt, settings)
	var i Setting
	err := row.Scan(
		&i.TenantName,
		&i.TenantEmail,
		&i.TenantWebsite,
		&i.TenantPhone,
		&i.TenantAzureid,
		&i.DisableEnrollment,
	)
	return i, err
}

const updateDeviceInventoryNode = `-- name: UpdateDeviceInventoryNode :exec
INSERT INTO device_inventory(device_id, uri, format, value) VALUES ($1, $2, $3, $4)
`

type UpdateDeviceInventoryNodeParams struct {
	DeviceID int32  `json:"device_id"`
	Uri      string `json:"uri"`
	Format   string `json:"format"`
	Value    string `json:"value"`
}

func (q *Queries) UpdateDeviceInventoryNode(ctx context.Context, arg UpdateDeviceInventoryNodeParams) error {
	_, err := q.exec(ctx, q.updateDeviceInventoryNodeStmt, updateDeviceInventoryNode,
		arg.DeviceID,
		arg.Uri,
		arg.Format,
		arg.Value,
	)
	return err
}
